x <- c(14.6, 15.1, 14.9, 14.8, 15.2, 15.1)
mean(x)
X <- c(10.1, 10, 9.8, 10.5, 9.7, 10.1, 9.9, 10.2, 10.3, 9.9)
t.test(X)
A <- c(79.98, 80.04, 80.02, 80.04, 80.03, 80.04, 79.97, 80.05, 80.03, 80.02, 80.00, 80.02)
B <- c(80.02, 79.94, 79.98, 79.97, 79.97, 80.03, 79.95, 79.97)
var.test(A, B)
X <- c(1050, 1100, 1120, 1250, 1280)
t.test(X, alternative = 'greater')
chisq.test()
?chisq.test
Z<-c(7, 10, 12, 8, 5)
n<-length(Z); p<-p[1:n-1]; p[n]<-1-q[n-1]
head(iris)
head(mtcars)
?add1
lamp <- data.frame(
)
lamp<-data.frame(
X=c(1600, 1610, 1650, 1680, 1700, 1700, 1780, 1500, 1640,
1400, 1700, 1750, 1640, 1550, 1600, 1620, 1640, 1600,
1740, 1800, 1510, 1520, 1530, 1570, 1640, 1600),
A=factor(c(rep(1,7),rep(2,5), rep(3,8), rep(4,6)))
)
lamp
lamp.aov <- aov(X~A, data = lamp)
summary(lamp.aov)
plot(lamp$X~lamp$A)
with(lamp. X[A==1])
with(lamp, X[A==1])
shapiro.test(with(lamp, X[A==1]))
gl(3, 20, 10)
student <- data.frame(
X1=c(148,139,160,149,159,142,153,150,151,139,
140,161,158,140,137,152,149,145,160,156,
151,147,157,147,157,151,144,141,139,148),
X2=c()
)
student <- data.frame(
X1=c(148,139,160,149,159,142,153,150,151,139,
140,161,158,140,137,152,149,145,160,156,
151,147,157,147,157,151,144,141,139,148),
X2=c(41, 34, 49, 36, 45, 31, 43, 43, 42, 31,
29, 47, 49, 33, 31, 35, 47, 35, 47, 44,
42, 38, 39, 30, 48, 36, 36, 30, 32, 38),
X3=c(72, 71, 77, 67, 80, 66, 76, 77, 77, 68,
64, 78, 78, 67, 66, 73, 82, 70, 74, 78,
73, 73, 68, 65, 80, 74, 68, 67, 68, 70),
X4=c(78, 76, 86, 79, 86, 76, 83, 79, 80, 74,
74, 84, 83, 77, 73, 79, 79, 77, 87, 85,
82, 78, 80, 75, 88, 80, 76, 76, 73, 78)
)
student
student.pr <- princomp(student, cor = TRUE)
summary(student.pr)
summary(student.pr, loadings = TRUE)
princomp(~X1+X2+X3+X4, data = student, cor=TRUE)
student.pr <- princomp(~X1+X2+X3+X4, data = student, cor=TRUE)
summary(student.pr)
summary(student.pr. loadings=TRUE)
summary(student.pr, loadings=TRUE)
predict(student.pr)
screeplot(student.pr, type = 'line')
screeplot(student.pr, type = 'line')
?screeplot
screeplot(student.pr, type = 'barplot')
screeplot(student.pr, type = 'lines')
summary(student.pr)
summary(student.pr, loadings = TURUE)
summary(student.pr, loadings = TRUE)
class(summary(student.pr, loadings = TRUE))
as.list(summary(student.pr, loadings = TRUE))
as.list(summary(student.pr, loadings = TRUE))$Loadings
class(as.list(summary(student.pr, loadings = TRUE)))
x<-c(1.00,
0.79, 1.00,
0.36, 0.31, 1.00,
0.96, 0.74, 0.38, 1.00,
0.89, 0.58, 0.31, 0.90, 1.00,
0.79, 0.58, 0.30, 0.78, 0.79, 1.00,
0.76, 0.55, 0.35, 0.75, 0.74, 0.73, 1.00,
0.26, 0.19, 0.58, 0.25, 0.25, 0.18, 0.24, 1.00,
0.21, 0.07, 0.28, 0.20, 0.18, 0.18, 0.29,-0.04, 1.00,
0.26, 0.16, 0.33, 0.22, 0.23, 0.23, 0.25, 0.49,-0.34, 1.00,
0.07, 0.21, 0.38, 0.08,-0.02, 0.00, 0.10, 0.44,-0.16, 0.23,
1.00,
0.52, 0.41, 0.35, 0.53, 0.48, 0.38, 0.44, 0.30,-0.05, 0.50,
0.24, 1.00,
0.77, 0.47, 0.41, 0.79, 0.79, 0.69, 0.67, 0.32, 0.23, 0.31,
0.10, 0.62, 1.00,
0.25, 0.17, 0.64, 0.27, 0.27, 0.14, 0.16, 0.51, 0.21, 0.15,
0.31, 0.17, 0.26, 1.00,
0.51, 0.35, 0.58, 0.57, 0.51, 0.26, 0.38, 0.51, 0.15, 0.29,
0.28, 0.41, 0.50, 0.63, 1.00,
0.21, 0.16, 0.51, 0.26, 0.23, 0.00, 0.12, 0.38, 0.18, 0.14,
0.31, 0.18, 0.24, 0.50, 0.65, 1.00)
names<-c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9",
"X10", "X11", "X12", "X13", "X14", "X15", "X16")
R<-matrix(0, nrow=16, ncol=16, dimnames=list(names, names))
R
for (i in 1:16){
for (j in 1:i){
R[i,j]<-x[(i-1)*i/2+j]; R[j,i]<-R[i,j]
}
}
R
?princomp
pr <- princomp(covmat=R)
p
pr
summary(pr)
load <- loadings(pr)
load()
load
plot(laod[, 1:2])
plot(laod[, 1:2])
plot(load[, 1:2])
text(load[,1], load[,2], adj = c(-0.4,0.3))
text(load[,1], load[,2])
text(load[,1], load[,2], adj = c(-0.4,0.3))
plot(load[, 1:2])
text(load[,1], load[,2], adj = c(-0.4,0.3))
conomy<-data.frame(
x1=c(149.3, 161.2, 171.5, 175.5, 180.8, 190.7,
202.1, 212.4, 226.1, 231.9, 239.0),
x2=c(4.2, 4.1, 3.1, 3.1, 1.1, 2.2, 2.1, 5.6, 5.0, 5.1, 0.7),
x3=c(108.1, 114.8, 123.2, 126.9, 132.1, 137.7,
146.0, 154.1, 162.3, 164.3, 167.6),
y=c(15.9, 16.4, 19.0, 19.1, 18.8, 20.4, 22.7,
26.5, 28.1, 27.6, 26.3)
)
conomy
lm.sol <- lm(y~x1+x2+x3, data = conomy)
summary(lm.sol)
vif
library(car)
vif(lm.sol)
cononmy.pr <- princomp(~x1+x2+x3, data = conomy, cor=T)
summary(cononmy.pr, loadings = T)
pre <- predict(cononmy.pr)
pre
conomy$z1 <- pre[, 1]; conomy$z2 <- pre[, 2]
lm.sol <- lm(y~z1+z2, data = conomy)
summary(lm.sol)
vif(lm.sol)
data(Income, package='rinds')
head(Income)
Income1 <- Income$Income
summary(Income1)
?ansari.test
cor(cars)
install.packages('mvtnorm')
library(mvtnorm)
set.seed(1)
sigma <- matrix(c(1,0.9,0.9,1), ncol = 2)
mnorm <- rmvnorm(n=100, mean = c(0,0), sigma = sigma)
plot(mnorm, asp = 1)
abline(a=0, b=1)
mnorm
sigma()
sigma
?rmvnorm
head(mnorm)
eig <- eigen(cor(mnorm))
cor(mnorm)
eig <- eigen(cor(mnorm))
eig
vector1 <- eig$vectors[, 1, drop=FALSE]
vector1
vector1 <- eig$vectors[, 1]
vector1
vector1 <- eig$vectors[, 1, , drop=FALSE]
vector1 <- eig$vectors[, 1, drop=FALSE]
vector2 <- eig$vectors[, 2, drop=FALSE]
vector2
scale(mnorm)
newX <- scale(mnorm) %*% vector1
newY <- scale(mnorm) %*% vector2
plot(newX, newY, ylim = c(-2,2))
install.packages('FactoMineR')
library(FactoMineR)
data("decathlon")
head(decathlon)
pca1 <- princomp(decathlon[, 1:10])
summary(pca1, loadings = TRUE)
plot(pca1, type='line')
summary(pca1, loadings = TRUE)
colnames(decathlon)
res.pca <- PCA(decathlon, quanti.sup = 11:12, quali.sup = 13)
summary(pca1, loadings = TRUE)
library(car)
data(mpg, package='ggplot2')
scatterplotMatrix(mpg[, c('displ', 'cty', 'hwy')])
scatterplotMatrix(mpg[, c('displ', 'cty', 'hwy')],
diagonal = 'histogram')
scatterplotMatrix(mpg[, c('displ', 'cty', 'hwy')],
diagonal = 'histogram', ellipse = TRUE)
install.packages('corrplot')
head(mtcars)
M <- cor(mtcars)
M
corrplot(M)
library(corrplot)
corrplot(M)
corrplot(M, order = 'hclust')
corrplot(M)
corrplot(M, order = 'hclust')
library(RMySQL)
channel <- dbConnect(MySQL(),
user='root',
password='',
dbname='test',
host='localhost')
ls('package:RMySQL')
dbListTables(channel)
dbFetch(channel, headmt)
library(RMySQL)
channel <- dbConnect(MySQL(),
user='root',
password='',
dbname='test',
host='localhost')
library(RMySQL)
channel <- dbConnect(MySQL(),
user='root',
password='',
dbname='test',
host='localhost')
dbListTables(channel)
dbFetch(channel, headmt)
dbFetch(channel, 'headmt)
dbFetch(channel, 'headmt')
dbFetch(channel, 'headmt')
channel <- dbConnect(MySQL(),
user='root',
password='',
dbname='test',
host='localhost')
channel <- dbConnect(MySQL(),
user='root',
password='d',
dbname='test',
host='localhost')
channel <- dbConnect(MySQL(),
user='root',
password='',
dbname='test',
host='localhost')
library(RMySQL)
channel <- dbConnect(MySQL(),
user='root',
password='',
dbname='test',
host='localhost')
getwd()
employee <- read.csv('C:\\Users\\lenovo\\Desktop\\employee.csv')
employee <- read.csv('C:\\Users\\lenovo\\Desktop\\employee.csv', header = TRUE)
employee
employee
employee <- read.csv('C:\\Users\\lenovo\\Desktop\\employee.csv', header = TRUE)
employee
employee
ls('package:RMySQL')
?dbWriteTable
dbWriteTable(employee, 'employee')
dbWriteTable(channel,'employee',employee)
library(dplyr)
install.packages('RSQLite')
library(RSQLite)
mydb <- src_sqlite('F:\\SQLite\\test.db', create = F)
mydb <- src_sqlite('F:\\SQLite\\test.db', create = T)
library(dplyr)
mydb <- src_sqlite('F:\\SQLite\\test.db', create = F)
mydb <- src_sqlite('F:\\SQLite\\test.db;', create = F)
library(dplyr)
mydb <- src_sqlite('F:\\SQLite\\test.db', create = F)
mydb
tbl(mydb, 'flights')
tbl(mydb, 'flights')
tbl(mydb,"cor")
tbl(mydb,"cor")
tbl(mydb,sql("SELECT * from flights"))
tbl(mydb,sql("SELECT * from cor"))
library(DBI)
library(RSQLite)
con <- dbConnect(SQLite(), 'F:/SQLite/test.db')
query <- 'select * from cor;'
cd <- tbl_df(dbGetQuery(con,query()))
cd <- tbl_df(dbGetQuery(con,query)
)
cd
library(RMySQL)
channel <- dbConnect(MySQL(),
user='root',
password='',
dbname='test',
host='localhost')
channel <- dbConnect(MySQL(),
user='root',
password='',
dbname='test',
host='localhost')
library(data.table)
set.seed(45L)
DT <- data.table(V1=c(1L,2L),
V2=LETTERS[1:3],
V3=round(rnorm(4),4),
V4=1:12)
DT
set.seed(45L)
DT <- data.table(V1=c(1L,2L),
V2=LETTERS[1:3],
V3=round(rnorm(4),4),
V4=1:12)
DT
DT[3:5,]
setcolorder(DT,c("V2","V1","V4","V3"))
setwd('F:/case/北京二手房/')
dat <- read.csv('mydata.csv', header = T)
str(dat)
head(dat)
dat[, c(2,3,6,7)] <- as.data.frame(apply(dat[, c(2,3,6,7)], 2, as.factor)) #将2,3,6,7列转化为因子型变量
summary(dat) #数据概述可以看出，在考虑现实情况下很多字段存在异常值
summary(lm2.sol)
lm2.sol <- lm(log(price)~., data=modeldata)
devtools::install_github("rstudio/rmarkdown")
install.packages('Rcpp')
install.packages("Rcpp")
devtools::install_github("rstudio/rmarkdown")
devtools::install_github("rstudio/rmarkdown")
devtools::install_github("rstudio/rmarkdown")
devtools::install_github("rstudio/rmarkdown")
installed.packages()
devtools::install_github("rstudio/rmarkdown")
rmarkdown::render('house.md',
output_format=pdf_document(latex_engine='xelatex')
)
rmarkdown::render('house.Rmd',
output_format=pdf_document(latex_engine='xelatex')
)
setwd()
getwd()
setwd('F:/case/北京二手房')
dat <- read.csv('二手房.csv', header = T)
str(dat)
head(dat)
#将2,3,6,7列转化为因子型变量
dat[, c(2,3,6,7)] <- as.data.frame(apply(dat[, c(2,3,6,7)], 2,
as.factor))
#数据概述可以看出，在考虑现实情况下很多字段存在异常值
summary(dat)
setwd('F:/case/北京二手房')
dat <- read.csv('二手房.csv', header = T)
str(dat)
head(dat)
#将2,3,6,7列转化为因子型变量
dat[, c(2,3,6,7)] <- as.data.frame(apply(dat[, c(2,3,6,7)], 2,
as.factor))
#数据概述可以看出，在考虑现实情况下很多字段存在异常值
summary(dat)
setwd('F:/case/北京二手房/')
setwd('F:/case/北京二手房/')
dat <- read.csv('二手房.csv', header=T)
head(dat)
str(dat)
dat[, c(2,3,6,7)] <- as.data.frame(apply(dat[, c(2,3,6,7)], 2, as.factor))
summary(dat) #数据概述可以看出，在考虑现实情况下很多字段存在异常值
## 数据预处理
apply(dat[,c(1,2,3,5)], 2, table)
### 统计各城区观测数
table(dat$CATE) #分布较均匀，石景山相对少些
### 卧室数分布
table(dat$bedrooms)
dat <- dat[!(dat$bedrooms %in% c(0,6,7,8,9)), ]  #卧室数0,6,7,8,9的观测很少，考虑删除
### 客厅数分布
table(dat$halls)
dat <- dat[!(dat$halls %in% c(4,9)), ] #客厅数4,9的观测很少，考虑删除
### 房屋面积分布
quantile(dat$AREA) #从数据可以看出，有异常值出现，不太符合现实情况
quantile(dat$AREA, probs = c(0.01,0.99)) #查看1%和99%的分位数
dat <- dat[dat$AREA>30 & dat$AREA<300, ]
### 楼层分布
table(dat$floor)
dat <- dat[dat$floor != 'basement ', ] #地下室的观测数少，我们可以做删除处理
### 是否临近地铁
prop.table(table(dat$subway)) #82.9%的观测临近地铁
### 是否为学区房
prop.table(table(dat$school)) #30.1%的观测是学区房
### 房价分布
quantile(dat$price) #有许多异常值
quantile(dat$price, probs = c(0.001,0.999)) #查看%1和99%的分位数
dat <- dat[dat$price>13500 & dat$price<150000, ]
### 北京的经纬度取值范围：
dat <- dat[dat$LONG>=115.5 & dat$LONG <= 117.5, ] #经度115.5~117.5
dat <- dat[dat$LAT>=39.5 & dat$LAT <= 41, ] #纬度39.5~41
### 保存清洗后的数据
write.csv(dat, file='mydata.csv',row.names = F)
dat <- read.csv('mydata.csv', header = T)
str(dat)
head(dat)
#将bedrooms,halls,subway和school字段转化为因子类型数据
dat[, c(2,3,6,7)] <- as.data.frame(apply(dat[, c(2,3,6,7)], 2, as.factor))
summary(dat)
dat <- read.csv('mydata.csv', header = T)
str(dat)
head(dat)
#将bedrooms,halls,subway和school字段转化为因子类型数据
dat[, c(2,3,6,7)] <- as.data.frame(apply(dat[, c(2,3,6,7)], 2, as.factor))
summary(dat)
# 描述性统计分析
## 在做分析之前，将CATE和floor字段的取值换成中文，以便作图输出美观
dict1 <- levels(dat$CATE)
dict2 <- c('朝阳','东城','丰台','海淀','石景山','西城')
dat$CATE <- as.factor(dict2[match(dat$CATE, dict1)])
dict3 <- levels(dat$floor)
dict4 <- c('高','低','中')
dat$floor <- as.factor(dict4[match(dat$floor, dict3)])
## 整个北京市场二手房房价分布图
dat$price <- dat$price/10000  #单位转化为万元
library(ggplot2)
ggplot(dat, aes(x=price)) +
geom_histogram(bins=13, fill='lightblue', color='black') +
theme(axis.text.x=element_text(size=rel(1.5)), axis.text.y=element_text(size=rel(1.5)),
axis.title.x=element_text(size=rel(1.5)), axis.title.y=element_text(size=rel(1.5)),
plot.title=element_text(size=rel(2), color='red')) +
labs(x='单位面积房价(万元/平方米)', y='频数', title='2016年5月北京市二手房单价分布图') +
scale_x_continuous(breaks=c(2:15))
dat[which.max(dat$price), ] #求出房价最高的观测值
dat[which.min(dat$price), ] #求出房价最低的观测值
## 六大城区对房价的分组箱线图
ggplot(dat, aes(x=CATE,y=price)) +
geom_boxplot(fill='lightblue') +
theme(axis.text.x=element_text(size=rel(1.5)), axis.text.y=element_text(size=rel(1.5)),
axis.title.x=element_text(size=rel(1.5)), axis.title.y=element_text(size=rel(1.5)),
plot.title=element_text(size=rel(2), color='red')) +
labs(x='城区', y='单位面积房价(万元)', title='2016年5月北京市六大城区二手房单价分布图') +
scale_x_discrete(limits=c('石景山','丰台','朝阳','东城','海淀','西城'))
## 卧室数对房价的分组箱线图
ggplot(dat, aes(x=bedrooms,y=price)) +
geom_boxplot(fill='lightblue') +
theme(axis.text.x=element_text(size=rel(1.5)), axis.text.y=element_text(size=rel(1.5)),
axis.title.x=element_text(size=rel(1.5)), axis.title.y=element_text(size=rel(1.5)),
plot.title=element_text(size=rel(2), color='red')) +
labs(x='卧室数', y='单位面积房价(万元)', title='卧室数对二手房单价的分布图')
## 厅数对房价的分组箱线图
ggplot(dat, aes(x=halls,y=price)) +
geom_boxplot(fill='lightblue') +
theme(axis.text.x=element_text(size=rel(1.5)), axis.text.y=element_text(size=rel(1.5)),
axis.title.x=element_text(size=rel(1.5)), axis.title.y=element_text(size=rel(1.5)),
plot.title=element_text(size=rel(2), color='red')) +
labs(x='厅数', y='单位面积房价(万元)', title='厅数对二手房单价的分布图')
## 楼层对房价的分组箱线图
ggplot(dat, aes(x=floor,y=price)) +
geom_boxplot(fill='lightblue') +
theme(axis.text.x=element_text(size=rel(1.5)), axis.text.y=element_text(size=rel(1.5)),
axis.title.x=element_text(size=rel(1.5)), axis.title.y=element_text(size=rel(1.5)),
plot.title=element_text(size=rel(2), color='red')) +
labs(x='楼层', y='单位面积房价(万元)', title='楼层对二手房单价的分布图') +
scale_x_discrete(limits=c('低','中','高'))
## 是否临近地铁对房价的分组箱线图
ggplot(dat, aes(x=subway,y=price)) +
geom_boxplot(fill='lightblue') +
theme(axis.text.x=element_text(size=rel(1.5)), axis.text.y=element_text(size=rel(1.5)),
axis.title.x=element_text(size=rel(1.5)), axis.title.y=element_text(size=rel(1.5)),
plot.title=element_text(size=rel(2), colour = 'red')) +
labs(x='临近地铁', y='单位面积房价(万元)', title='临近地铁对二手房单价的分布图') +
scale_x_discrete(labels = c('否', '是'))
## 是否学区房对房价的分组箱线图
ggplot(dat, aes(x=school,y=price)) +
geom_boxplot(fill='lightblue') +
theme(axis.text.x=element_text(size=rel(1.5)), axis.text.y=element_text(size=rel(1.5)),
axis.title.x=element_text(size=rel(1.5)), axis.title.y=element_text(size=rel(1.5)),
plot.title=element_text(size=rel(2), colour = 'red')) +
labs(x='学区房', y='单位面积房价(万元)', title='学区房对二手房单价的分布图') +
scale_x_discrete(labels = c('否', '是'))
# 线性回归分析预测二手房房价
modeldata <- dat[,1:8]
dummvar <- model.matrix(price~.,modeldata)
modeldata <- cbind(dummvar[,-1],modeldata$price)
colnames(modeldata) <- c('CATE_dc','CATE_ft','CATE_hd','CATE_sjs','CATE_sc','bedrooms2',
'bedrooms3','bedrooms4','bedrooms5','halls1','halls2','halls3',
'AREA','floor_high','floor_medium','subway','school','price')
modeldata <- as.data.frame(modeldata)
lm1.sol <- lm(price~., data=modeldata)
summary(lm1.sol)
par(mfrow=c(2,2))
plot(lm1.sol)
lm2.sol <- lm(log(price)~., data=modeldata)
summary(lm2.sol)
par(mfrow=c(2,2))
plot(lm2.sol)
lm1.step <- step(lm2.sol)
par(mfrow=c(2,2))
plot(lm1.step)
lm3.sol <- update(lm1.step, .~.+CATE_dc*school+CATE_ft*school+
CATE_hd*school+CATE_sjs*school+CATE_sc*school)
par(mfrow=c(2,2))
plot(lm3.sol)
lm2.step <- step(lm3.sol)
par(mfrow=c(2,2))
plot(lm2.step)
summary(lm2.step)
drop1(lm2.step)
lm.opt <- update(lm2.step,.~.-floor_medium,data=modeldata)
summary(lm.opt)
plot(lm.opt)
AIC(lm2.sol,lm1.step,lm3.sol,lm2.step,lm.opt)
BIC(lm2.sol,lm1.step,lm3.sol,lm2.step,lm.opt)
library(car)
vif(lm.opt)
vif(lm1.sol)
AIC(lm1.sol)
